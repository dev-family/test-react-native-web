/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0.0
 */
import type {
  CommentInterface,
  CommentPaginatedInterface,
  CreateAccountValidator,
  CreatePostCommentValidator,
  CreatePostReactionValidator,
  CreatePostValidator,
  CreatePostVoteValidator,
  GetApiPostsParams,
  GetApiPostsPostIdCommentsParams,
  LoginValidator,
  PostInterface,
  PostTagInterface,
  PostsPaginatedInterface,
  UpdateUserValidator,
  UserInterface,
  UserResultInterface,
} from './client.schemas';
import {customInstance} from './axios';

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/api/posts_controller.ts_ - **index**
 * @summary Get a list of posts (index)
 */
export const getApiPosts = (
  params?: GetApiPostsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostsPaginatedInterface>(
    {url: `/api/posts`, method: 'GET', params},
    options,
  );
};

/**
 * 

 _app/controllers/api/posts_controller.ts_ - **store**
 * @summary  (store)
 */
export const postApiPosts = (
  createPostValidator: CreatePostValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostInterface>(
    {
      url: `/api/posts`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: createPostValidator,
    },
    options,
  );
};

/**
 * 

 _app/controllers/api/posts_controller.ts_ - **create**
 * @summary  (create)
 */
export const getApiPostsCreate = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {url: `/api/posts/create`, method: 'GET'},
    options,
  );
};

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/api/posts_controller.ts_ - **show**
 * @summary Get a single instance of posts (show)
 */
export const getApiPostsId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostInterface>(
    {url: `/api/posts/${id}`, method: 'GET'},
    options,
  );
};

/**
 * 

 _app/controllers/api/posts_controller.ts_ - **update**
 * @summary Update posts (update)
 */
export const putApiPostsId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {url: `/api/posts/${id}`, method: 'PUT'},
    options,
  );
};

/**
 * 

 _app/controllers/api/posts_controller.ts_ - **destroy**
 * @summary Delete posts (destroy)
 */
export const deleteApiPostsId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {url: `/api/posts/${id}`, method: 'DELETE'},
    options,
  );
};

/**
 * 

 _app/controllers/api/posts_controller.ts_ - **edit**
 * @summary  (edit)
 */
export const getApiPostsIdEdit = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {url: `/api/posts/${id}/edit`, method: 'GET'},
    options,
  );
};

/**
 * 

 _app/controllers/api/posts_controller.ts_ - **vote**
 * @summary  (vote)
 */
export const postApiPostsPostIdVote = (
  postId: string,
  createPostVoteValidator: CreatePostVoteValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostInterface>(
    {
      url: `/api/posts/${postId}/vote`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: createPostVoteValidator,
    },
    options,
  );
};

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/admin/post_tags_controller.ts_ - **getAll**
 * @summary  (getAll)
 */
export const getApiTags = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostTagInterface[]>(
    {url: `/api/tags`, method: 'GET'},
    options,
  );
};

/**
 * 

 _app/controllers/api/post_likes_controller.ts_ - **addReaction**
 * @summary  (addReaction)
 */
export const postApiPostsPostIdLike = (
  postId: string,
  createPostReactionValidator: CreatePostReactionValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostInterface>(
    {
      url: `/api/posts/${postId}/like`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: createPostReactionValidator,
    },
    options,
  );
};

/**
 * 

 _app/controllers/api/post_likes_controller.ts_ - **removeReaction**
 * @summary  (removeReaction)
 */
export const deleteApiPostsPostIdLike = (
  postId?: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostInterface>(
    {url: `/api/posts/${postId}/like`, method: 'DELETE'},
    options,
  );
};

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/api/post_comments_controller.ts_ - **getCommentsByPostId**
 * @summary  (getCommentsByPostId)
 */
export const getApiPostsPostIdComments = (
  postId: string,
  params?: GetApiPostsPostIdCommentsParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CommentPaginatedInterface>(
    {url: `/api/posts/${postId}/comments`, method: 'GET', params},
    options,
  );
};

/**
 * 

 _app/controllers/api/post_comments_controller.ts_ - **leaveComment**
 * @summary  (leaveComment)
 */
export const postApiPostsPostIdComments = (
  postId: string,
  createPostCommentValidator: CreatePostCommentValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CommentInterface>(
    {
      url: `/api/posts/${postId}/comments`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: createPostCommentValidator,
    },
    options,
  );
};

/**
 * 

 _app/controllers/api/post_comments_controller.ts_ - **removeComment**
 * @summary  (removeComment)
 */
export const deleteApiPostsPostIdCommentsCommentId = (
  postId: string,
  commentId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CommentInterface>(
    {url: `/api/posts/${postId}/comments/${commentId}`, method: 'DELETE'},
    options,
  );
};

/**
 * 

 _app/controllers/api/post_comments_controller.ts_ - **replyComment**
 * @summary  (replyComment)
 */
export const postApiPostsPostIdCommentsCommentId = (
  postId: string,
  commentId: string,
  createPostCommentValidator: CreatePostCommentValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CommentInterface>(
    {
      url: `/api/posts/${postId}/comments/${commentId}`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: createPostCommentValidator,
    },
    options,
  );
};

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/api/post_comments_controller.ts_ - **getCommentReplies**
 * @summary  (getCommentReplies)
 */
export const getApiPostsPostIdCommentsCommentId = (
  postId: string,
  commentId: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<CommentInterface[]>(
    {url: `/api/posts/${postId}/comments/${commentId}`, method: 'GET'},
    options,
  );
};

/**
 * 

 _app/controllers/api/auth_controller.ts_ - **login**
 * @summary  (login)
 */
export const postApiAuthLogin = (
  loginValidator: LoginValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResultInterface>(
    {
      url: `/api/auth/login`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: loginValidator,
    },
    options,
  );
};

/**
 * 

 _app/controllers/api/auth_controller.ts_ - **register**
 * @summary  (register)
 */
export const postApiAuthRegister = (
  createAccountValidator: CreateAccountValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserResultInterface>(
    {
      url: `/api/auth/register`,
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      data: createAccountValidator,
    },
    options,
  );
};

/**
 * 

 _app/controllers/api/auth_controller.ts_ - **social**
 * @summary  (social)
 */
export const postApiAuthSocial = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {url: `/api/auth/social`, method: 'POST'},
    options,
  );
};

/**
 * 

 _app/controllers/api/auth_controller.ts_ - **logout**
 * @summary  (logout)
 */
export const postApiAuthLogout = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>(
    {url: `/api/auth/logout`, method: 'POST'},
    options,
  );
};

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/api/users_controller.ts_ - **get**
 * @summary  (get)
 */
export const getApiUser = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserInterface>(
    {url: `/api/user`, method: 'GET'},
    options,
  );
};

/**
 * 

 _app/controllers/api/users_controller.ts_ - **edit**
 * @summary  (edit)
 */
export const patchApiUser = (
  updateUserValidator: UpdateUserValidator,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<UserInterface>(
    {
      url: `/api/user`,
      method: 'PATCH',
      headers: {'Content-Type': 'application/json'},
      data: updateUserValidator,
    },
    options,
  );
};

/**
 * 

 _app/controllers/api/users_controller.ts_ - **delete**
 * @summary  (delete)
 */
export const deleteApiUser = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>({url: `/api/user`, method: 'DELETE'}, options);
};

/**
 * 

 _app/controllers/admin/post_tags_controller.ts_ - **create**
 * @summary  (create)
 */
export const postAdminTags = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<unknown>({url: `/admin/tags`, method: 'POST'}, options);
};

/**
 * Returns **200** (OK) as **application/json**

 _app/controllers/admin/post_tags_controller.ts_ - **getAll**
 * @summary  (getAll)
 */
export const getAdminTags = (
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PostTagInterface[]>(
    {url: `/admin/tags`, method: 'GET'},
    options,
  );
};

export type GetApiPostsResult = NonNullable<
  Awaited<ReturnType<typeof getApiPosts>>
>;
export type PostApiPostsResult = NonNullable<
  Awaited<ReturnType<typeof postApiPosts>>
>;
export type GetApiPostsCreateResult = NonNullable<
  Awaited<ReturnType<typeof getApiPostsCreate>>
>;
export type GetApiPostsIdResult = NonNullable<
  Awaited<ReturnType<typeof getApiPostsId>>
>;
export type PutApiPostsIdResult = NonNullable<
  Awaited<ReturnType<typeof putApiPostsId>>
>;
export type DeleteApiPostsIdResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiPostsId>>
>;
export type GetApiPostsIdEditResult = NonNullable<
  Awaited<ReturnType<typeof getApiPostsIdEdit>>
>;
export type PostApiPostsPostIdVoteResult = NonNullable<
  Awaited<ReturnType<typeof postApiPostsPostIdVote>>
>;
export type GetApiTagsResult = NonNullable<
  Awaited<ReturnType<typeof getApiTags>>
>;
export type PostApiPostsPostIdLikeResult = NonNullable<
  Awaited<ReturnType<typeof postApiPostsPostIdLike>>
>;
export type DeleteApiPostsPostIdLikeResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiPostsPostIdLike>>
>;
export type GetApiPostsPostIdCommentsResult = NonNullable<
  Awaited<ReturnType<typeof getApiPostsPostIdComments>>
>;
export type PostApiPostsPostIdCommentsResult = NonNullable<
  Awaited<ReturnType<typeof postApiPostsPostIdComments>>
>;
export type DeleteApiPostsPostIdCommentsCommentIdResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiPostsPostIdCommentsCommentId>>
>;
export type PostApiPostsPostIdCommentsCommentIdResult = NonNullable<
  Awaited<ReturnType<typeof postApiPostsPostIdCommentsCommentId>>
>;
export type GetApiPostsPostIdCommentsCommentIdResult = NonNullable<
  Awaited<ReturnType<typeof getApiPostsPostIdCommentsCommentId>>
>;
export type PostApiAuthLoginResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogin>>
>;
export type PostApiAuthRegisterResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthRegister>>
>;
export type PostApiAuthSocialResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthSocial>>
>;
export type PostApiAuthLogoutResult = NonNullable<
  Awaited<ReturnType<typeof postApiAuthLogout>>
>;
export type GetApiUserResult = NonNullable<
  Awaited<ReturnType<typeof getApiUser>>
>;
export type PatchApiUserResult = NonNullable<
  Awaited<ReturnType<typeof patchApiUser>>
>;
export type DeleteApiUserResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiUser>>
>;
export type PostAdminTagsResult = NonNullable<
  Awaited<ReturnType<typeof postAdminTags>>
>;
export type GetAdminTagsResult = NonNullable<
  Awaited<ReturnType<typeof getAdminTags>>
>;
